golem::fill_desc(
pkg_name = "tcmiqe",
pkg_title = "PKG_TITLE",
pkg_description = "PKG_DESC.",
authors = person(
given = "AUTHOR_FIRST",
family = "AUTHOR_LAST",
email = "AUTHOR@MAIL.COM",
role = c("aut", "cre")
),
repo_url = NULL,
pkg_version = "0.0.0.9000",
set_options = TRUE
)
golem::fill_desc(
pkg_name = "tcmiqe",
pkg_title = "PKG_TITLE",
pkg_description = "PKG_DESC.",
authors = person(
given = "AUTHOR_FIRST",
family = "AUTHOR_LAST",
email = "AUTHOR@MAIL.COM",
role = c("aut", "cre")
),
repo_url = NULL,
pkg_version = "0.0.0.9000",
set_options = TRUE
)
usethis::use_mit_license("Donghui Xia")
golem::use_readme_rmd(open = FALSE)
usethis::use_code_of_conduct(contact = "dhxia@snut.edu.cn")
usethis::use_lifecycle_badge("Experimental")
usethis::use_news_md(open = FALSE)
golem::use_recommended_tests()
golem::use_favicon()
golem::use_utils_ui(with_test = TRUE)
golem::use_utils_server(with_test = TRUE)
attachment::att_amend_desc()
usethis::use_test("app")
usethis::use_vignette("tcmiqe")
usethis::use_coverage()
covrpage::covrpage()
devtools::check()
golem::add_shinyappsio_file()
rsconnect::writeManifest()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
library(shinydashboard)
help("dashboardPage")
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
library(SHINY)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
help(sidebarMenu)
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
actionButton("button", "Click me"),
div(id = "hello", "Hello!")
)
server <- function(input, output) {
observeEvent(input$button, {
toggle("hello")
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
selectInput("col", "Colour:",
c("white", "yellow", "red", "blue", "purple")),
div(id = "hello", "Hello!")
)
server <- function(input, output) {
observeEvent(input$col, {
toggle("hello")
})
}
shinyApp(ui, server)
help("toggle")
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
selectInput("col", "Colour:",
c("white", "yellow", "red", "blue", "purple")),
div(id = "hello", "Hello!")
)
server <- function(input, output) {
observeEvent(input$col, {
if (input$col == "yellow"){
show("hello")
} else {
hide("hello")
}
})
}
shinyApp(ui, server)
jscode <- "
shinyjs.init = function() {
$(document).keypress(function(e) { alert('Key pressed: ' + e.which); });
}"
shinyApp(
ui = fluidPage(
useShinyjs(),
extendShinyjs(text = jscode, functions = c()),
"Press any key"
),
server = function(input, output) {}
)
jsCode <- "shinyjs.pageCol = function(params){$('body').css('background', params);}"
shinyApp(
ui = fluidPage(
useShinyjs(),
extendShinyjs(text = jsCode, functions = c("pageCol")),
selectInput("col", "Colour:",
c("white", "yellow", "red", "blue", "purple"))
),
server = function(input, output) {
observeEvent(input$col, {
js$pageCol(input$col)
})
}
)
library(shiny)
library(shinyjs)
jsCode <- '
shinyjs.backgroundCol = function(params) {
var defaultParams = {
id : null,
col : "red"
};
params = shinyjs.getParams(params, defaultParams);
var el = $("#" + params.id);
el.css("background-color", params.col);
}'
shinyApp(
ui = fluidPage(
useShinyjs(),
extendShinyjs(text = jsCode, functions = c("backgroundCol")),
p(id = "name", "My name is Dean"),
p(id = "sport", "I like soccer"),
selectInput("col", "Colour",
c("green", "yellow", "red", "blue", "white")),
selectInput("selector", "Element", c("sport", "name", "button")),
actionButton("button", "Go")
),
server = function(input, output) {
observeEvent(input$button, {
js$backgroundCol(input$selector, input$col)
})
}
)
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
golem::add_module(name = "home", with_test = TRUE)
golem::add_module(name = "tool", with_test = TRUE)
golem::add_module(name = "netpharm", with_test = TRUE)
golem::add_module(name = "bioinfoData", with_test = TRUE)
golem::add_module(name = "statistics", with_test = TRUE)
golem::add_module(name = "survival", with_test = TRUE)
golem::add_module(name = "cox", with_test = TRUE)
golem::add_module(name = "deg", with_test = TRUE)
golem::add_module(name = "sampleData", with_test = TRUE)
golem::add_module(name = "algorithm", with_test = TRUE)
golem::add_module(name = "modeling", with_test = TRUE)
golem::add_module(name = "struct", with_test = TRUE)
golem::add_module(name = "qsar", with_test = TRUE)
golem::add_module(name = "docking", with_test = TRUE)
golem::add_module(name = "md", with_test = TRUE)
mod_home_server("home")
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
help(v)
help(md)
help(dashboardHeader)
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
library(shinydisconnect)
help(package=shinydisconnect)
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
help(tabPanel)
help(DToutput)
library(DT)
help(dataTableOutput)
if (interactive()) {
# pass a callback function to DataTables using I()
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
),
server = function(input, output) {
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
}
)
}
help(DTOutput)
if (interactive()) {
library(shiny)
library(DT)
shinyApp(
ui = fluidPage(fluidRow(column(12, DTOutput('tbl')))),
server = function(input, output) {
output$tbl = renderDT(
iris, options = list(lengthChange = FALSE)
)
}
)
}
options(golem.app.prod = FALSE)
options(shiny.port = httpuv::randomPort())
golem::detach_all_attached()
golem::document_and_reload()
run_app()
